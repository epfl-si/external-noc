---
# ------------------------------------------------- Directories and static files
- name: Create various destination directories for noc files
  file:
    path: "{{ data_path }}/grafana/{{ item }}"
    state: directory
  with_items:
    - conf

- name: Create writable directories
  file:
    path: "{{ data_path }}/grafana/{{ item }}"
    state: directory
    mode: "u=rwx,g=rwx,o=rwx"
  with_items:
    - logs
    - data
    - data/plugins
    - provisioning/dashboards/GitLab
    - provisioning/dashboards/Go
    - provisioning/dashboards/GoTest
    - provisioning/dashboards/Memento
    - provisioning/dashboards/NOC
    - provisioning/dashboards/PhDAssess
    - provisioning/dashboards/WordPress
    - provisioning/datasources
    - provisioning/notifiers

- name: Grafana provisionned dashboards
  template:
    src: "provisioning/dashboards/{{ item }}"
    dest: "{{ data_path }}/grafana/provisioning/dashboards/{{ item }}"
  with_items:
    - dashboards.yml
    - GitLab/GitLabEPFL-default.json
    - GitLab/GitLabEPFL-statistics.json
    - GitLab/GitLabEPFL-postgres.json
    - GitLab/GitLabEPFL-traefik.json
    - Go/GoCadvisor.json
    - Go/GoNodeExporter.json
    - Go/GoPostgres-9528.json
    - Go/GoNginx-12708.json
    - Go/GoPHP-FPM-3901.json
    - Go/GoTraefik-12250.json
    - GoTest/go-test-nginx.json
    - GoTest/go-test-php-fpm-3901.json
    - GoTest/go-test-traefik-12250.json
    - GoTest/go-test-node-exporter.json
    - GoTest/go-test-postgres-db-9628.json
    - Memento/Memento-status.json
    - Memento/Memento-statistics.json
    - NOC/NodeExporter.json
    - NOC/Prometheus-Alerts.json
    - PhDAssess/PhDAssess.json
    - WordPress/Ressenti.json
    - WordPress/WordPress-general.json
    - WordPress/WordPress-backup-detail.json
    - WordPress/WordPress-plugins-and-blocks.json
    - WordPress/WordPress-detail.json
  register: grafana_templates

# -------------------------------------------------------------------- Templates
- name: Grafana template config
  template:
    src: "grafana/{{ item }}"
    dest: "{{ data_path }}/grafana/{{ item }}"
  with_items:
    - conf/grafana.ini
    - provisioning/datasources/idevfsd-prometheus.yml
    - provisioning/datasources/go-prom-ds.yml
    - provisioning/datasources/go-test-prom-ds.yml
    - provisioning/notifiers/telegram.yml
  register: grafana_config_files

# -------------------------------------------------------------------- Container
- name: "Pull Grafana {{ grafana_image_qualified }}"
  community.docker.docker_image:
    name: "{{ grafana_image_qualified }}"
    source: pull

- name: Run Grafana
  docker_container:
    name: "{{ grafana_container_name }}"
    image: "{{ grafana_image_qualified }}"
    detach: yes
    restart_policy: unless-stopped
    recreate: >-
      {{
        (grafana_config_files is defined and grafana_config_files is changed)
        or
        (grafana_templates is defined and grafana_templates is changed)
      }}
    network_mode: "{{ backend_network_name }}"
    volumes:
      - "{{ data_path }}/grafana/data:/var/lib/grafana"
      - "{{ data_path }}/grafana/conf/grafana.ini:/etc/grafana/grafana.ini"
      - "{{ data_path }}/grafana/provisioning:/etc/grafana/provisioning"
    env:
      GF_INSTALL_PLUGINS: "{{ grafana.plugins | join(',') }}"
    log_driver: json-file
    log_options:
      max-size: 50m
      max-file: "3"
    labels:
      traefik.enable: "true"
      traefik.http.routers.grafana.rule: "Host(`grafana.noc{{ dns_suffix }}.{{ frontend.domain }}`)"
      traefik.http.routers.grafana.entrypoints: "websecure"
      traefik.http.routers.grafana.tls.certresolver: "letsencrypt"
      traefik.docker.network: "{{ backend_network_name }}"
